# Boost Python:
	# Download boost at https://www.boost.org/users/download/
	
	# Linux:
		BOOST_DIRECTORY = /usr/local/boost_1_70_0
		
		# Extract file to $BOOST_DIRECTORY
		# 	tar  x: This option tells tar to extract the files.
		# 	tar  v: The “v” stands for “verbose.” This option will list all of the files one by one in the archive.
		# 	tar  z: The z option is very important and tells the tar command to uncompress the file (gzip).
		# 	tar  f: This options tells tar that you are going to give it a file name to work with.
		# 	tar -C: Argument is used to specify the path to place the file.
		tar xvzf boost_1_70_0.tar.gz -C $BOOST_DIRECTORY

		# Go to $BOOST_DIRECTORY
		cd $BOOST_DIRECTORY
		
		# Specify the tools and libraries available to the build system.
		"using python : 3.8 : /usr/bin/python3 : /usr/include/python3.7m : /usr/lib ;" >> $BOOST_DIRECTORY/libs/beast/tools/user-config.jam
		
		# Boost's bootstrap setup.
		bash $BOOST_DIRECTORY/bootstrap.sh --prefix=/usr/local/ --with-python-version=3.7

		# Build.
		# 	b2 -j: Number of threads to use.
		bash b2 -j8

		# Install.
		# 	b2 -j: Number of threads to use.
		#???sudo b2 install -j8

		# To use custom module make a symbolic link to the `sites-packages` of the main python.
		ln -s /path/to/module /usr/lib/python3.7/site-packages

		# Test:
			# Go to project directory.
			cd /path/to/project

			# Build project using g++.
			# 	gcc    -I: Adds include directory of header files.
			# 	gcc    -c: Compile or assemble the source files, but do not link.
			# 	gcc -fPIC: Generates position independent code (PIC) for shared libraries.
			# 	gcc    -o: Writes the build output to an output file.
			g++ -I/usr/include/python3.7 -c -fPIC hello_ext.cpp -o hello_ext.o
			# 	gcc -shared: Generates shared object file for shared library.
			# 	gcc -Wl,xxx: Option for gcc passes a comma-separated list of tokens as a space-separated list of arguments to the linker.
			# 	gcc -soname: Specifies the required soname.
			# 	gcc      -l: Links with a library file.
			g++ -shared -Wl,-soname,hello_ext.so -o hello_ext.so  hello_ext.o -lpython3.7m -lboost_python38

	# Windows:
		# Open "PowerShell":
            $BOOST_DIRECTORY  = "D:\\Boost\\boost_1_72_0"
            $PYTHON_DIRECTORY = "C:\\Users\\Sebastien\\AppData\\Local\\Programs\\Python"

            # Extract file to $BOOST_DIRECTORY
            Expand-Archive -LiteralPath C:\Archives\Invoices.zip -DestinationPath $BOOST_DIRECTORY
            
            # Go to $BOOST_DIRECTORY
            cd $BOOST_DIRECTORY
		
		# Open "Developer Command Prompt for VS 2019".
			# Boost's bootstrap setup.
			bootstrap.bat vc142

		# Open "PowerShell" or use a text editor:
			# Append to the file for building x86...
			$ Add-Content project-config.jam "
# x86
using python : 3.8
			 : $PYTHON_DIRECTORY\\Python38-32\\python.exe
			 : $PYTHON_DIRECTORY\\Python38-32\\include
			 : $PYTHON_DIRECTORY\\Python38-32\\libs
			 : <address-model>32
			 ;
"

			# Append to the file for building x64...
			$ Add-Content project-config.jam "
# x64
using python : 3.8
			 : $PYTHON_DIRECTORY\\Python38\\python.exe
			 : $PYTHON_DIRECTORY\\Python38\\include
			 : $PYTHON_DIRECTORY\\Python38\\libs
			 : <address-model>64
			 ;
"
		
		# Open "Developer Command Prompt for VS 2019".
			# Build (Don't forget to install `numpy` before building).
			$ b2 --with-locale --with-python --address-model=32 -j8 --build-type=complete
			$ b2 --with-locale --with-python --address-model=32,64 -j8 --build-type=complete
		
		# Open "PowerShell":
            # Create a symbolic link to the include path.
            New-Item -ItemType Junction -Target "boost" -Path "D:\\include\\boost"
            New-Item -ItemType Junction -Target "$PYTHON_DIRECTORY\\Python38\\include" -Path "D:\\include\\python_x64"
            New-Item -ItemType Junction -Target "$PYTHON_DIRECTORY\\Python38-32\\include" -Path "D:\\include\\python_x86"
            
            # Create a symbolic link to the lib search path.
            New-Item -ItemType Junction -Target "stage\\lib" -Path "D:\\lib\\boost"
            New-Item -ItemType Junction -Target "$PYTHON_DIRECTORY\\Python38\\libs" -Path "D:\\lib\\python_x64"
            New-Item -ItemType Junction -Target "$PYTHON_DIRECTORY\\Python38-32\\libs" -Path "D:\\lib\\python_x86"

            # To use custom module make a symbolic link to the `sites-packages` of the main python.
            New-Item -ItemType Junction -Target "\\path\\to\\module" -Path "$PYTHON_DIRECTORY\\Python38\\Lib\\site-packages"
            New-Item -ItemType Junction -Target "\\path\\to\\module" -Path "$PYTHON_DIRECTORY\\Python38-32\\Lib\\site-packages"

# Install "pip".
Download "https://bootstrap.pypa.io/get-pip.py"
python get-pip.py
pip install --upgrade numpy mprpc
